from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
import os

TOKEN = os.getenv("TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOOSING, PLOT_SIZE, PLOT_BUDGET, HOUSE_ROOMS, HOUSE_FLOORS = range(5)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞
reply_keyboard = [["üè° –î–æ–º", "üåø –£—á–∞—Å—Ç–æ–∫"]]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ?",
        reply_markup=markup
    )
    return CHOOSING

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
async def choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    context.user_data["choice"] = choice

    if choice == "üåø –£—á–∞—Å—Ç–æ–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–≤ —Å–æ—Ç–∫–∞—Ö):")
        return PLOT_SIZE
    elif choice == "üè° –î–æ–º":
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ?")
        return HOUSE_ROOMS
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")
        return CHOOSING

# –£—á–∞—Å—Ç–æ–∫: –ø–ª–æ—â–∞–¥—å
async def plot_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["plot_size"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ —É—á–∞—Å—Ç–æ–∫? (–≤ —Ä—É–±–ª—è—Ö)")
    return PLOT_BUDGET

# –£—á–∞—Å—Ç–æ–∫: –±—é–¥–∂–µ—Ç
async def plot_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["plot_budget"] = update.message.text
    await update.message.reply_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–æ–∫ –ø–ª–æ—â–∞–¥—å—é {context.user_data['plot_size']} —Å–æ—Ç–æ–∫ "
        f"—Å –±—é–¥–∂–µ—Ç–æ–º {context.user_data['plot_budget']} —Ä—É–±. –ú—ã –ø–æ–¥–±–µ—Ä–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã!"
    )
    return ConversationHandler.END

# –î–æ–º: –∫–æ–º–Ω–∞—Ç—ã
async def house_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["house_rooms"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ?")
    return HOUSE_FLOORS

# –î–æ–º: —ç—Ç–∞–∂–∏
async def house_floors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["house_floors"] = update.message.text
    await update.message.reply_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–º —Å {context.user_data['house_rooms']} –∫–æ–º–Ω–∞—Ç–∞–º–∏ "
        f"–∏ {context.user_data['house_floors']} —ç—Ç–∞–∂–∞–º–∏. –ú—ã –ø–æ–¥–±–µ—Ä–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()

# –î–∏–∞–ª–æ–≥–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose)],
        PLOT_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot_size)],
        PLOT_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot_budget)],
        HOUSE_ROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, house_rooms)],
        HOUSE_FLOORS: [MessageHandler(filters.TEXT & ~filters.COMMAND, house_floors)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.run_polling()

