from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
import os

TOKEN = os.getenv("TOKEN")

CHOOSING_STAGE, CHOOSING_PLOT, CONTACT = range(3)

OFFERS = [
    # –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    {'location': '3 —ç—Ç–∞–ø', 'size': '6 —Å–æ—Ç–æ–∫', 'price': '3 900 000 ‚ÇΩ', 'utilities': '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è'},
    {"location": "2 —ç—Ç–∞–ø", "size": "6.92 —Å–æ—Ç–∫–∏", "price": "4 498 000 ‚ÇΩ"},
    {"location": "5 —ç—Ç–∞–ø", "size": "4.9 —Å–æ—Ç–∫–∏", "price": "3 185 000 ‚ÇΩ"},
    {"location": "6 —ç—Ç–∞–ø", "size": "4.75 —Å–æ—Ç–∫–∏", "price": "3 087 000 ‚ÇΩ"},
    {"location": "4 —ç—Ç–∞–ø", "size": "5.5 —Å–æ—Ç–æ–∫", "price": "2 200 000 ‚ÇΩ"},
    {"location": "4 —ç—Ç–∞–ø", "size": "6 —Å–æ—Ç–æ–∫", "price": "2 400 000 ‚ÇΩ"},
    {"location": "–∫–æ–º–º–µ—Ä—Ü–∏—è", "size": "20 —Å–æ—Ç–æ–∫", "price": "10 000 000 ‚ÇΩ"},
    {'location': '–ø–æ–¥ –º–∫–¥', 'size': '75 —Å–æ—Ç–æ–∫', 'price': '37 900 000 ‚ÇΩ', 'utilities': '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è'},
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("3 —ç—Ç–∞–ø", callback_data="3 —ç—Ç–∞–ø"),
         InlineKeyboardButton("4 —ç—Ç–∞–ø", callback_data="4 —ç—Ç–∞–ø")],
        [InlineKeyboardButton("5 —ç—Ç–∞–ø", callback_data="5 —ç—Ç–∞–ø"),
         InlineKeyboardButton("6 —ç—Ç–∞–ø", callback_data="6 —ç—Ç–∞–ø")],
        [InlineKeyboardButton("–ö–æ–º–º–µ—Ä—Ü–∏—è", callback_data="–∫–æ–º–º–µ—Ä—Ü–∏—è"),
         InlineKeyboardButton("–ü–æ–¥ –ú–ö–î", callback_data="–ø–æ–¥ –º–∫–¥")]
    ]
    await update.message.reply_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—á–∞—Å—Ç–∫–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING_STAGE

async def show_plots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    stage = query.data
    context.user_data["stage"] = stage

    matched = [o for o in OFFERS if o["location"] == stage]
    if not matched:
        await query.edit_message_text("üòî –£—á–∞—Å—Ç–∫–æ–≤ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton(f"{o['size']} ‚Äî {o['price']}", callback_data=f"{o['size']}|{o['price']}")]
        for o in matched
    ]
    keyboard.append([
        InlineKeyboardButton("üîÑ –°–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë", callback_data="more"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    ])
    keyboard.append([
        InlineKeyboardButton("üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º", url="https://t.me/+79624406464")
    ])

    await query.edit_message_text(
        f"üìã –£—á–∞—Å—Ç–∫–∏ –Ω–∞ {stage}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING_PLOT

async def more_plots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stage = context.user_data.get("stage", "")
    fake_query = update.callback_query
    fake_query.data = stage
    return await show_plots(update, context)

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    return await start(update.callback_query, context)

async def confirm_plot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "more":
        return await more_plots(update, context)
    elif query.data == "back":
        return await go_back(update, context)

    size, price = query.data.split("|")
    stage = context.user_data.get("stage", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø")
    context.user_data["plot_info"] = f"{stage}, {size}, {price}"

    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–æ–∫ {size} –Ω–∞ {stage} –∑–∞ {price}.

"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username –¥–ª—è —Å–≤—è–∑–∏:"
    )
    return CONTACT

async def save_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.text
    plot_info = context.user_data.get("plot_info", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–æ–∫")
    await update.message.reply_text(
        f"üì® –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
–£—á–∞—Å—Ç–æ–∫: {plot_info}
–ö–æ–Ω—Ç–∞–∫—Ç: {contact}

"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôè"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING_STAGE: [CallbackQueryHandler(show_plots)],
        CHOOSING_PLOT: [CallbackQueryHandler(confirm_plot)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_contact)]
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(conv_handler)
app.run_polling()
