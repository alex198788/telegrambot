from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
import os

TOKEN = os.getenv("TOKEN")

# States
CHOOSING, PLOT_SIZE, PLOT_BUDGET, PLOT_LOCATION, PLOT_CONTACT = range(5)

# Offer list
OFFERS = [
    {"location": "3 —ç—Ç–∞–ø", "size": "6 —Å–æ—Ç–æ–∫", "price": "3 900 000 ‚ÇΩ", "utilities": "–≠–ª–µ–∫—Ç—Ä., –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"},
    {"location": "2 —ç—Ç–∞–ø", "size": "6.92 —Å–æ—Ç–∫–∏", "price": "4 498 000 ‚ÇΩ", "utilities": "–≠–ª–µ–∫—Ç—Ä., –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"},
    {"location": "5 —ç—Ç–∞–ø", "size": "4.9 —Å–æ—Ç–∫–∏", "price": "3 185 000 ‚ÇΩ", "utilities": "–≠–ª–µ–∫—Ç—Ä., –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"},
    {"location": "6 —ç—Ç–∞–ø", "size": "4.75 —Å–æ—Ç–∫–∏", "price": "3 087 000 ‚ÇΩ", "utilities": "–≠–ª–µ–∫—Ç—Ä., –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"},
    {"location": "4 —ç—Ç–∞–ø", "size": "5.5 —Å–æ—Ç–æ–∫", "price": "2 200 000 ‚ÇΩ", "utilities": "–≠–ª–µ–∫—Ç—Ä., –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"},
    {"location": "4 —ç—Ç–∞–ø", "size": "6 —Å–æ—Ç–æ–∫", "price": "2 400 000 ‚ÇΩ", "utilities": "–≠–ª–µ–∫—Ç—Ä., –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"},
    {"location": "–∫–æ–º–º–µ—Ä—Ü–∏—è", "size": "20 —Å–æ—Ç–æ–∫", "price": "10 000 000 ‚ÇΩ", "utilities": "–≠–ª–µ–∫—Ç—Ä., –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"},
    {"location": "–ø–æ–¥ –º–∫–¥", "size": "75 —Å–æ—Ç–æ–∫", "price": "37 900 000 ‚ÇΩ", "utilities": "–≠–ª–µ–∫—Ç—Ä., –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"},
]

# Keyboards
start_keyboard = [["üìã –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É"]]
location_keyboard = [
    ["3 —ç—Ç–∞–ø", "4 —ç—Ç–∞–ø"],
    ["5 —ç—Ç–∞–ø", "6 —ç—Ç–∞–ø"],
    ["–ö–æ–º–º–µ—Ä—Ü–∏—è", "–ü–æ–¥ –ú–ö–î"]
]

markup_start = ReplyKeyboardMarkup(start_keyboard, one_time_keyboard=True, resize_keyboard=True)
markup_location = ReplyKeyboardMarkup(location_keyboard, one_time_keyboard=True, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=markup_start
    )
    return CHOOSING

async def choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if "–ø–æ–¥–±–æ—Ä–∫—É" in text.lower():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–≤ —Å–æ—Ç–∫–∞—Ö):")
        return PLOT_SIZE
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return CHOOSING

async def plot_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["plot_size"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç? (–≤ —Ä—É–±–ª—è—Ö)")
    return PLOT_BUDGET

async def plot_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["plot_budget"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—á–∞—Å—Ç–∫–∞:", reply_markup=markup_location)
    return PLOT_LOCATION

async def plot_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.text.strip().lower()
    context.user_data["plot_location"] = location

    matched_offers = [o for o in OFFERS if o["location"].lower() in location]

    if matched_offers:
        response = "–í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:

"
        for offer in matched_offers:
            response += (
                f"üè∑ –£—á–∞—Å—Ç–æ–∫ {offer['size']}
"
                f"üìç –†–∞–π–æ–Ω: {offer['location']}
"
                f"üí∞ {offer['price']}
"
                f"üîå –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {offer['utilities']}

"
            )
    else:
        response = "üòî –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–∫–æ–≤ –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!"

    await update.message.reply_text(response)
    await update.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username –¥–ª—è —Å–≤—è–∑–∏:")
    return PLOT_CONTACT

async def plot_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["plot_contact"] = update.message.text
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôè"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# App setup
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose)],
        PLOT_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot_size)],
        PLOT_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot_budget)],
        PLOT_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot_location)],
        PLOT_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot_contact)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.run_polling()
