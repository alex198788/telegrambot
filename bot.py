from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
import os

TOKEN = os.getenv("TOKEN")

SHOWING_PLOTS, CONFIRM_PLOT, CONTACT = range(3)

PLOTS = [
    {
        "photo": "plot1.jpg",
        "stage": "3 —ç—Ç–∞–ø",
        "size": "6 —Å–æ—Ç–æ–∫",
        "price": "3 900 000 ‚ÇΩ",
        "utilities": "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
    }
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["index"] = 0
    return await show_plot(update, context)

async def show_plot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data.get("index", 0)
    if index >= len(PLOTS):
        await update.message.reply_text("üèÅ –£—á–∞—Å—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return ConversationHandler.END

    plot = PLOTS[index]
    photo = InputFile(plot["photo"])
    caption = (
        "üìç –≠—Ç–∞–ø: " + plot["stage"].replace(" —ç—Ç–∞–ø", "") + "\n"
        "üìê –ü–ª–æ—â–∞–¥—å: " + plot["size"] + "\n"
        "üí∞ –¶–µ–Ω–∞: " + plot["price"] + "\n"
        "üîå –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: " + plot["utilities"]
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data="select")],
        [InlineKeyboardButton("‚û° –°–ª–µ–¥—É—é—â–∏–π", callback_data="next")],
        [InlineKeyboardButton("üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", url="https://t.me/+79624406464")]
    ]
    await update.message.reply_photo(photo=photo, caption=caption, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOWING_PLOTS

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = context.user_data.get("index", 0)

    if query.data == "next":
        context.user_data["index"] = index + 1
        return await show_plot(query, context)
    elif query.data == "select":
        context.user_data["selected"] = PLOTS[index]
        await query.edit_message_caption(caption="‚úÖ –£—á–∞—Å—Ç–æ–∫ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username:")
        return CONTACT

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.text
    plot = context.user_data.get("selected", {})
    msg = (
        "üì® –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        "–£—á–∞—Å—Ç–æ–∫: " + plot.get("stage", "") + ", " + plot.get("size", "") + ", " + plot.get("price", "") + "\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç: " + contact + "\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôè"
    )
    await update.message.reply_text(msg)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        SHOWING_PLOTS: [CallbackQueryHandler(handle_action)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(conv_handler)
app.run_polling()
