from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, ConversationHandler, filters
)
from telegram.ext.webhook import WebhookServer
import os

TOKEN = os.getenv("TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

SHOWING_PLOTS, CONTACT = range(2)

PLOTS = [
    {
        "photo": "plot1.jpg",
        "stage": "3 —ç—Ç–∞–ø",
        "size": "6 —Å–æ—Ç–æ–∫",
        "price": "3 900 000 ‚ÇΩ",
        "utilities": "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –≥–∞–∑, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
    }
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["index"] = 0
    return await show_plot(update, context)

async def show_plot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data.get("index", 0)
    if index >= len(PLOTS):
        await update.message.reply_text("üèÅ –£—á–∞—Å—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return ConversationHandler.END

    plot = PLOTS[index]
    photo = InputFile(plot["photo"])
    caption = (
        "üìç –≠—Ç–∞–ø: " + plot["stage"].replace(" —ç—Ç–∞–ø", "") + "\n"
        "üìê –ü–ª–æ—â–∞–¥—å: " + plot["size"] + "\n"
        "üí∞ –¶–µ–Ω–∞: " + plot["price"] + "\n"
        "üîå –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: " + plot["utilities"]
    )
    keyboard = [
        [{"text": "‚úÖ –í—ã–±—Ä–∞—Ç—å", "callback_data": "select"}],
        [{"text": "üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "url": "https://t.me/+79624406464"}]
    ]
    await update.message.reply_photo(photo=photo, caption=caption)
    return SHOWING_PLOTS

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.text
    plot = context.user_data.get("selected", PLOTS[0])
    msg = (
        "üì® –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        "–£—á–∞—Å—Ç–æ–∫: " + plot.get("stage", "") + ", " + plot.get("size", "") + ", " + plot.get("price", "") + "\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç: " + contact + "\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôè"
    )
    await update.message.reply_text(msg)
    return ConversationHandler.END

async def set_webhook(app):
    await app.bot.set_webhook(WEBHOOK_URL)

app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        SHOWING_PLOTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact)],
    },
    fallbacks=[]
)

app.add_handler(conv_handler)

if __name__ == "__main__":
    import asyncio
    asyncio.run(set_webhook(app))
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_path=WEBHOOK_PATH,
        url_path=WEBHOOK_PATH,
        webhook_url=WEBHOOK_URL
    )
